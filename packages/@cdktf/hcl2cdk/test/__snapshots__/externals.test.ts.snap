// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`externals handle external data typescript snapshot 1`] = `
"import * as constructs from \\"constructs\\";
import * as cdktf from \\"cdktf\\";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from \\"./.gen/providers/aws\\";
import * as external from \\"./.gen/providers/external\\";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    new aws.provider.AwsProvider(this, \\"aws\\", {
      region: \\"us-east-1\\",
    });
    new external.provider.ExternalProvider(this, \\"external\\", {});
    const changemeSpotAndFargateRegion = new cdktf.TerraformVariable(
      this,
      \\"changeme_spot_and_fargate_region\\",
      {
        default: \\"us-east-1\\",
      }
    );
    const awsEksClusterChangemeSpotAndFargateEksCluster =
      new aws.eksCluster.EksCluster(
        this,
        \\"changeme_spot_and_fargate_eks_cluster\\",
        {
          name: \\"foo\\",
          roleArn:
            \\"arn:aws:iam::123456789012:role/eksctl-foo-cluster-ServiceRole-1A2B3C4D5E6F\\",
          vpcConfig: {
            subnetIds: [\\"subnet-12345678901234567\\"],
          },
        }
      );
    const dataAwsEksClusterChangemeSpotAndFargateEksClusterData =
      new aws.dataAwsEksCluster.DataAwsEksCluster(
        this,
        \\"changeme_spot_and_fargate_eks_cluster_data\\",
        {
          name: \\"foo\\",
        }
      );
    const dataExternalChangemeExternalThumbprintData =
      new external.DataExternal(this, \\"changeme_external_thumbprint_data\\", {
        dependsOn: [awsEksClusterChangemeSpotAndFargateEksCluster],
        program: [
          \\"\${path.module}/oidc_thumbprint.sh\\",
          changemeSpotAndFargateRegion.value,
        ],
      });
    new aws.iamOpenidConnectProvider.IamOpenidConnectProvider(
      this,
      \\"changeme_iam_openid_connect_provider\\",
      {
        clientIdList: [\\"sts.amazonaws.com\\"],
        lifecycle: {
          ignoreChanges: [thumbprintList],
        },
        thumbprintList: [
          dataExternalChangemeExternalThumbprintData.result.thumbprint,
        ],
        url:
          \\"\${\\" +
          dataAwsEksClusterChangemeSpotAndFargateEksClusterData.fqn +
          \\"}.identity[0].oidc[0].issuer\\",
      }
    );
  }
}
"
`;
