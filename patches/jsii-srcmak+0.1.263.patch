diff --git a/node_modules/jsii-srcmak/.DS_Store b/node_modules/jsii-srcmak/.DS_Store
new file mode 100644
index 0000000..d8462ec
Binary files /dev/null and b/node_modules/jsii-srcmak/.DS_Store differ
diff --git a/node_modules/jsii-srcmak/lib/cli.js b/node_modules/jsii-srcmak/lib/cli.js
index db731ee..84b66b6 100644
--- a/node_modules/jsii-srcmak/lib/cli.js
+++ b/node_modules/jsii-srcmak/lib/cli.js
@@ -14,6 +14,8 @@ async function main() {
         .option('java-package', { desc: 'the java package (namespace) to use for all generated types', type: 'string' })
         .option('csharp-outdir', { desc: 'C# output directory (requires --csharp-namespace)', type: 'string' })
         .option('csharp-namespace', { desc: 'the C# namespace to use for all generated types', type: 'string' })
+        .option('golang-outdir', { desc: 'golang output directory (requires --golang-module)', type: 'string' })
+        .option('golang-module', { desc: 'the golang module to use for all generated types', type: 'string' })
         .showHelpOnFail(true)
         .help();
     const argv = args.argv;
@@ -31,6 +33,7 @@ async function main() {
         ...parsePythonOptions(),
         ...parseJavaOptions(),
         ...parseCSharpOptions(),
+        ...parseGoLangOptions(),
     });
     function parseJsiiOptions() {
         const jsiiPath = argv['jsii-path'];
@@ -100,6 +103,26 @@ async function main() {
             },
         };
     }
+    function parseGoLangOptions() {
+        const outdir = argv['golang-outdir'];
+        const module = argv['golang-module'];
+        if (!outdir && !module) {
+            return undefined;
+        }
+        if (!outdir) {
+            throw new Error('--golang-outdir is required');
+        }
+        if (!module) {
+            throw new Error('--golang-module is required');
+        }
+        return {
+            // moduleKey: module,
+            golang: {
+                outdir: outdir,
+                moduleName: module,
+            },
+        };
+    }
     function parseDepOption() {
         var _a;
         if (((_a = argv.dep) === null || _a === void 0 ? void 0 : _a.length) === 0) {
@@ -114,4 +137,4 @@ main().catch((e) => {
     console.error(e.stack);
     process.exit(1);
 });
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/node_modules/jsii-srcmak/lib/compile.js b/node_modules/jsii-srcmak/lib/compile.js
index f1c2ee4..9c6f5c0 100644
--- a/node_modules/jsii-srcmak/lib/compile.js
+++ b/node_modules/jsii-srcmak/lib/compile.js
@@ -34,7 +34,7 @@ async function compile(workdir, options) {
         const moduleVersion = metadata.version;
         const targetdir = path.join(path.join(workdir, 'node_modules'), moduleName);
         await fs.mkdirp(path.dirname(targetdir));
-        await fs.copy(dir, targetdir);
+        await fs.ensureSymlink(dir, targetdir);
         // add to "deps" and "peer deps"
         if (!moduleName.startsWith('@types/')) {
             deps[moduleName] = moduleVersion;
@@ -76,10 +76,15 @@ async function compile(workdir, options) {
             packageId: options.csharp.namespace,
         };
     }
+    if (options.golang) {
+        targets.go = {
+            moduleName: options.golang.moduleName,
+        };
+    }
     await fs.writeFile(path.join(workdir, 'package.json'), JSON.stringify(pkg, undefined, 2));
     await util_1.exec(compilerModule, args, {
         cwd: workdir,
     });
 }
 exports.compile = compile;
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyw2QkFBNkI7QUFDN0IsK0JBQStCO0FBRS9CLGlDQUErQztBQUUvQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXhEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7O0lBQzdELHNCQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxNQUFNLFVBQVUsR0FBRyxNQUFBLE9BQU8sQ0FBQyxVQUFVLG1DQUFJLFVBQVUsQ0FBQztJQUVwRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssS0FBSyxFQUFFO1FBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLFVBQVUsRUFBRSxDQUFDLENBQUM7S0FDdEU7SUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzFELE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM1RjtJQUVELHVDQUF1QztJQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUV2RixNQUFNLFNBQVMsR0FBRyxNQUFBLE1BQUEsT0FBTyxDQUFDLFNB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QyxDQUFDLENBQUMsQ0FBQztJQUUxRixNQUFNLFdBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFO1FBQy9CLEdBQUcsRUFBRSxPQUFPO0tBQ2IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXZGRCwwQkF1RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IGV4ZWMsIHZhbGlkYXRlT3B0aW9ucyB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IGNvbXBpbGVyTW9kdWxlID0gcmVxdWlyZS5yZXNvbHZlKCdqc2lpL2Jpbi9qc2lpJyk7XG5cbi8qKlxuICogQ29tcGlsZXMgdGhlIHNvdXJjZSBmaWxlcyBpbiBgd29ya2RpcmAgd2l0aCBqc2lpLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGlsZSh3b3JrZGlyOiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpO1xuXG4gIGNvbnN0IGFyZ3MgPSBbJy0tc2lsZW5jZS13YXJuaW5ncycsICdyZXNlcnZlZC13b3JkJ107XG4gIGNvbnN0IGVudHJ5cG9pbnQgPSBvcHRpb25zLmVudHJ5cG9pbnQgPz8gJ2luZGV4LnRzJztcblxuICBpZiAocGF0aC5leHRuYW1lKGVudHJ5cG9pbnQpICE9PSAnLnRzJykge1xuICAgIHRocm93IG5ldyBFcnJvcihganNpaSBlbnRyeXBvaW50IG11c3QgYmUgYSAudHMgZmlsZTogJHtlbnRyeXBvaW50fWApO1xuICB9XG5cbiAgaWYgKCEoYXdhaXQgZnMucGF0aEV4aXN0cyhwYXRoLmpvaW4od29ya2RpciwgZW50cnlwb2ludCkpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5hYmxlIHRvIGZpbmQgdHlwZXNjcmlwdCBlbnRyeXBvaW50OiAke3BhdGguam9pbih3b3JrZGlyLCBlbnRyeXBvaW50KX1gKTtcbiAgfVxuXG4gIC8vIHBhdGggdG8gZW50cnlwb2ludCB3aXRob3V0IGV4dGVuc2lvblxuICBjb25zdCBiYXNlcGF0aCA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUoZW50cnlwb2ludCksIHBhdGguYmFzZW5hbWUoZW50cnlwb2ludCwgJy50cycpKTtcblxuICBjb25zdCBtb2R1bGVLZXkgPSBvcHRpb25zLm1vZHVsZUtleT8ucmVwbGFjZSgvXFwuL2csICcnKS5yZXBsYWNlKC9cXC8vZywgJycpID8/IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYmFzZXBhdGgsICd1dGY4JykuZGlnZXN0KCdoZXgnKTtcblxuICAvLyBqc2lpIG1vZHVsZXMgdG8gaW5jbHVkZVxuICBjb25zdCBtb2R1bGVEaXJzID0gb3B0aW9ucy5kZXBzID8/IFtdO1xuXG4gIGNvbnN0IHRhcmdldHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7IH07XG5cbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgfTtcblxuICBmb3IgKGNvbnN0IGRpciBvZiBtb2R1bGVEaXJzKSB7XG4gICAgLy8gcmVhZCBtb2R1bGUgbWV0YWRhdGFcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGZzLnJlYWRKc29uKHBhdGguam9pbihkaXIsICdwYWNrYWdlLmpzb24nKSk7XG4gICAgY29uc3QgbW9kdWxlTmFtZTogc3RyaW5nID0gbWV0YWRhdGEubmFtZTtcbiAgICBjb25zdCBtb2R1bGVWZXJzaW9uOiBzdHJpbmcgPSBtZXRhZGF0YS52ZXJzaW9uO1xuXG4gICAgY29uc3QgdGFyZ2V0ZGlyID0gcGF0aC5qb2luKHBhdGguam9pbih3b3JrZGlyLCAnbm9kZV9tb2R1bGVzJyksIG1vZHVsZU5hbWUpO1xuICAgIGF3YWl0IGZzLm1rZGlycChwYXRoLmRpcm5hbWUodGFyZ2V0ZGlyKSk7XG4gICAgYXdhaXQgZnMuY29weShkaXIsIHRhcmdldGRpcik7XG5cbiAgICAvLyBhZGQgdG8gXCJkZXBzXCIgYW5kIFwicGVlciBkZXBzXCJcbiAgICBpZiAoIW1vZHVsZU5hbWUuc3RhcnRzV2l0aCgnQHR5cGVzLycpKSB7XG4gICAgICBkZXBzW21vZHVsZU5hbWVdID0gbW9kdWxlVmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwa2cgPSB7XG4gICAgbmFtZTogbW9kdWxlS2V5LFxuICAgIHZlcnNpb246ICcwLjAuMCcsXG4gICAgYXV0aG9yOiAnZ2VuZXJhdGVkQGdlbmVyYXRlZC5jb20nLFxuICAgIG1haW46IGAke2Jhc2VwYXRofS5qc2AsXG4gICAgdHlwZXM6IGAke2Jhc2VwYXRofS5kLnRzYCxcbiAgICBsaWNlbnNlOiAnQXBhY2hlLTIuMCcsXG4gICAgcmVwb3NpdG9yeTogeyB1cmw6ICdodHRwOi8vZ2VuZXJhdGVkJywgdHlwZTogJ2dpdCcgfSxcbiAgICBqc2lpOiB7XG4gICAgICBvdXRkaXI6ICdkaXN0JyxcbiAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IGRlcHMsXG4gICAgcGVlckRlcGVuZGVuY2llczogZGVwcyxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5weXRob24pIHtcbiAgICB0YXJnZXRzLnB5dGhvbiA9IHtcbiAgICAgIGRpc3ROYW1lOiAnZ2VuZXJhdGVkJyxcbiAgICAgIG1vZHVsZTogb3B0aW9ucy5weXRob24ubW9kdWxlTmFtZSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuamF2YSkge1xuICAgIHRhcmdldHMuamF2YSA9IHtcbiAgICAgIHBhY2thZ2U6IG9wdGlvbnMuamF2YS5wYWNrYWdlLFxuICAgICAgbWF2ZW46IHtcbiAgICAgICAgZ3JvdXBJZDogJ2dlbmVyYXRlZCcsXG4gICAgICAgIGFydGlmYWN0SWQ6ICdnZW5lcmF0ZWQnLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY3NoYXJwKSB7XG4gICAgdGFyZ2V0cy5kb3RuZXQgPSB7XG4gICAgICBuYW1lc3BhY2U6IG9wdGlvbnMuY3NoYXJwLm5hbWVzcGFjZSxcbiAgICAgIHBhY2thZ2VJZDogb3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlLFxuICAgIH07XG4gIH1cblxuICBhd2FpdCBmcy53cml0ZUZpbGUocGF0aC5qb2luKHdvcmtkaXIsICdwYWNrYWdlLmpzb24nKSwgSlNPTi5zdHJpbmdpZnkocGtnLCB1bmRlZmluZWQsIDIpKTtcblxuICBhd2FpdCBleGVjKGNvbXBpbGVyTW9kdWxlLCBhcmdzLCB7XG4gICAgY3dkOiB3b3JrZGlyLFxuICB9KTtcbn1cbiJdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyw2QkFBNkI7QUFDN0IsK0JBQStCO0FBRS9CLGlDQUErQztBQUUvQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXhEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7O0lBQzdELHNCQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxNQUFNLFVBQVUsU0FBRyxPQUFPLENBQUMsVUFBVSxtQ0FBSSxVQUFVLENBQUM7SUFFcEQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0tBQ3RFO0lBRUQsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMxRCxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDNUY7SUFFRCx1Q0FBdUM7SUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFdkYsTUFBTSxTQUFTLGVBQUcsT0FBTyxDQUFDLFNBQVMsMENBQUUsT0FBTyxD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QUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRixNQUFNLFdBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFO1FBQy9CLEdBQUcsRUFBRSxPQUFPO0tBQ2IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTdGRCwwQkE2RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IGV4ZWMsIHZhbGlkYXRlT3B0aW9ucyB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IGNvbXBpbGVyTW9kdWxlID0gcmVxdWlyZS5yZXNvbHZlKCdqc2lpL2Jpbi9qc2lpJyk7XG5cbi8qKlxuICogQ29tcGlsZXMgdGhlIHNvdXJjZSBmaWxlcyBpbiBgd29ya2RpcmAgd2l0aCBqc2lpLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGlsZSh3b3JrZGlyOiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpO1xuXG4gIGNvbnN0IGFyZ3MgPSBbJy0tc2lsZW5jZS13YXJuaW5ncycsICdyZXNlcnZlZC13b3JkJ107XG4gIGNvbnN0IGVudHJ5cG9pbnQgPSBvcHRpb25zLmVudHJ5cG9pbnQgPz8gJ2luZGV4LnRzJztcblxuICBpZiAocGF0aC5leHRuYW1lKGVudHJ5cG9pbnQpICE9PSAnLnRzJykge1xuICAgIHRocm93IG5ldyBFcnJvcihganNpaSBlbnRyeXBvaW50IG11c3QgYmUgYSAudHMgZmlsZTogJHtlbnRyeXBvaW50fWApO1xuICB9XG5cbiAgaWYgKCEoYXdhaXQgZnMucGF0aEV4aXN0cyhwYXRoLmpvaW4od29ya2RpciwgZW50cnlwb2ludCkpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5hYmxlIHRvIGZpbmQgdHlwZXNjcmlwdCBlbnRyeXBvaW50OiAke3BhdGguam9pbih3b3JrZGlyLCBlbnRyeXBvaW50KX1gKTtcbiAgfVxuXG4gIC8vIHBhdGggdG8gZW50cnlwb2ludCB3aXRob3V0IGV4dGVuc2lvblxuICBjb25zdCBiYXNlcGF0aCA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUoZW50cnlwb2ludCksIHBhdGguYmFzZW5hbWUoZW50cnlwb2ludCwgJy50cycpKTtcblxuICBjb25zdCBtb2R1bGVLZXkgPSBvcHRpb25zLm1vZHVsZUtleT8ucmVwbGFjZSgvXFwuL2csICcnKS5yZXBsYWNlKC9cXC8vZywgJycpID8/IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYmFzZXBhdGgsICd1dGY4JykuZGlnZXN0KCdoZXgnKTtcblxuICAvLyBqc2lpIG1vZHVsZXMgdG8gaW5jbHVkZVxuICBjb25zdCBtb2R1bGVEaXJzID0gb3B0aW9ucy5kZXBzID8/IFtdO1xuXG4gIGNvbnN0IHRhcmdldHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7IH07XG5cbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgfTtcblxuICBmb3IgKGNvbnN0IGRpciBvZiBtb2R1bGVEaXJzKSB7XG4gICAgLy8gcmVhZCBtb2R1bGUgbWV0YWRhdGFcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGZzLnJlYWRKc29uKHBhdGguam9pbihkaXIsICdwYWNrYWdlLmpzb24nKSk7XG4gICAgY29uc3QgbW9kdWxlTmFtZTogc3RyaW5nID0gbWV0YWRhdGEubmFtZTtcbiAgICBjb25zdCBtb2R1bGVWZXJzaW9uOiBzdHJpbmcgPSBtZXRhZGF0YS52ZXJzaW9uO1xuXG4gICAgY29uc3QgdGFyZ2V0ZGlyID0gcGF0aC5qb2luKHBhdGguam9pbih3b3JrZGlyLCAnbm9kZV9tb2R1bGVzJyksIG1vZHVsZU5hbWUpO1xuICAgIGF3YWl0IGZzLm1rZGlycChwYXRoLmRpcm5hbWUodGFyZ2V0ZGlyKSk7XG4gICAgYXdhaXQgZnMuZW5zdXJlU3ltbGluayhkaXIsIHRhcmdldGRpcik7XG5cbiAgICAvLyBhZGQgdG8gXCJkZXBzXCIgYW5kIFwicGVlciBkZXBzXCJcbiAgICBpZiAoIW1vZHVsZU5hbWUuc3RhcnRzV2l0aCgnQHR5cGVzLycpKSB7XG4gICAgICBkZXBzW21vZHVsZU5hbWVdID0gbW9kdWxlVmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwa2cgPSB7XG4gICAgbmFtZTogbW9kdWxlS2V5LFxuICAgIHZlcnNpb246ICcwLjAuMCcsXG4gICAgYXV0aG9yOiAnZ2VuZXJhdGVkQGdlbmVyYXRlZC5jb20nLFxuICAgIG1haW46IGAke2Jhc2VwYXRofS5qc2AsXG4gICAgdHlwZXM6IGAke2Jhc2VwYXRofS5kLnRzYCxcbiAgICBsaWNlbnNlOiAnQXBhY2hlLTIuMCcsXG4gICAgcmVwb3NpdG9yeTogeyB1cmw6ICdodHRwOi8vZ2VuZXJhdGVkJywgdHlwZTogJ2dpdCcgfSxcbiAgICBqc2lpOiB7XG4gICAgICBvdXRkaXI6ICdkaXN0JyxcbiAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IGRlcHMsXG4gICAgcGVlckRlcGVuZGVuY2llczogZGVwcyxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5weXRob24pIHtcbiAgICB0YXJnZXRzLnB5dGhvbiA9IHtcbiAgICAgIGRpc3ROYW1lOiAnZ2VuZXJhdGVkJyxcbiAgICAgIG1vZHVsZTogb3B0aW9ucy5weXRob24ubW9kdWxlTmFtZSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuamF2YSkge1xuICAgIHRhcmdldHMuamF2YSA9IHtcbiAgICAgIHBhY2thZ2U6IG9wdGlvbnMuamF2YS5wYWNrYWdlLFxuICAgICAgbWF2ZW46IHtcbiAgICAgICAgZ3JvdXBJZDogJ2dlbmVyYXRlZCcsXG4gICAgICAgIGFydGlmYWN0SWQ6ICdnZW5lcmF0ZWQnLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY3NoYXJwKSB7XG4gICAgdGFyZ2V0cy5kb3RuZXQgPSB7XG4gICAgICBuYW1lc3BhY2U6IG9wdGlvbnMuY3NoYXJwLm5hbWVzcGFjZSxcbiAgICAgIHBhY2thZ2VJZDogb3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlLFxuICAgIH07XG4gIH1cblxuICBpZiAob3B0aW9ucy5nb2xhbmcpIHtcbiAgICB0YXJnZXRzLmdvID0ge1xuICAgICAgbW9kdWxlTmFtZTogb3B0aW9ucy5nb2xhbmcubW9kdWxlTmFtZSxcbiAgICB9O1xuICB9XG5cbiAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGguam9pbih3b3JrZGlyLCAncGFja2FnZS5qc29uJyksIEpTT04uc3RyaW5naWZ5KHBrZywgdW5kZWZpbmVkLCAyKSk7XG5cbiAgYXdhaXQgZXhlYyhjb21waWxlck1vZHVsZSwgYXJncywge1xuICAgIGN3ZDogd29ya2RpcixcbiAgfSk7XG59XG4iXX0=
\ No newline at end of file
diff --git a/node_modules/jsii-srcmak/lib/index.js b/node_modules/jsii-srcmak/lib/index.js
index 4920d06..d5775b7 100644
--- a/node_modules/jsii-srcmak/lib/index.js
+++ b/node_modules/jsii-srcmak/lib/index.js
@@ -7,7 +7,7 @@ var __createBinding = (this && this.__createBinding) || (Object.create ? (functi
     o[k2] = m[k];
 }));
 var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 __exportStar(require("./srcmak"), exports);
diff --git a/node_modules/jsii-srcmak/lib/options.d.ts b/node_modules/jsii-srcmak/lib/options.d.ts
index 6277b1f..9052599 100644
--- a/node_modules/jsii-srcmak/lib/options.d.ts
+++ b/node_modules/jsii-srcmak/lib/options.d.ts
@@ -40,6 +40,12 @@ export interface Options {
      * @default - C# is not generated
      */
     csharp?: CSharpOutputOptions;
+    /**
+     * Produces Golang code.
+     *
+     * @default - go is not generated
+     */
+    golang?: GoLangOutputOptions;
 }
 export interface JsiiOutputOptions {
     /**
@@ -86,3 +92,16 @@ export interface CSharpOutputOptions {
      */
     namespace: string;
 }
+export interface GoLangOutputOptions {
+    /**
+     * Base root directory.
+     */
+    outdir: string;
+    /**
+     * The go module name
+     *
+     * This must follow standard Go module name conventions.
+     * For example, it cannot include an underscore ('_') or be camelCased
+     */
+    moduleName: string;
+}
diff --git a/node_modules/jsii-srcmak/lib/options.js b/node_modules/jsii-srcmak/lib/options.js
index 424c1e1..e4e3b0d 100644
--- a/node_modules/jsii-srcmak/lib/options.js
+++ b/node_modules/jsii-srcmak/lib/options.js
@@ -1,3 +1,3 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHJlbGF0aXZlIHBhdGggb2YgdGhlIC50cyBlbnRyeXBvaW50IHdpdGhpbiB0aGUgc291cmNlIGRpcmVjdG9yeS5cbiAgICogQGRlZmF1bHQgXCJpbmRleC50c1wiXG4gICAqL1xuICBlbnRyeXBvaW50Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGRpcmVjdG9yaWVzIHRoYXQgaW5jbHVkZSBub2RlIG1vZHVsZXMgdG8gc3ltbGluayBpbnRvIHRoZSBjb21waWxlZFxuICAgKiBwYWNrYWdlLiBGb3IgZXhhbXBsZSwgaWYgeW91ciBnZW5lcmF0ZWQgY29kZSByZWZlcmVuY2VzIHNvbWUgbGlicmFyeSwgeW91XG4gICAqIHNob3VsZCBpbmNsdWRlIGl0J3MgbW9kdWxlIGRpcmVjdG9yeSBpbiBoZXJlLlxuICAgKi9cbiAgZGVwcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBTYXZlIC5qc2lpIGZpbGUgdG8gYW4gb3V0cHV0IGxvY2F0aW9uLlxuICAgKiBAZGVmYXVsdCAtIGpzaWkgbWFuaWZlc3QgaXMgb21pdHRlZC5cbiAgICovXG4gIGpzaWk/OiBKc2lpT3V0cHV0T3B0aW9ucztcblxuICAvKipcbiAgICogS2V5IGZvciB0aGUgbW9kdWxlIHRvIHByZXZlbnQgSlNJSSBjb2xsaXNpb25zLlxuICAgKlxuICAgKiBVc2UgeW91ciBvd24gaWYgaXQncyBwcm9qZWN0LXVuaXF1ZSwgb3RoZXJ3aXNlIHVzZSBkZWZhdWx0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGhhc2ggb2YgdGhlIGJhc2VwYXRoIHRvIHRoZSBtb2R1bGVcbiAgICovXG4gIG1vZHVsZUtleT86IHN0cmluZztcblxuICAvKipcbiAgICogUHJvZHVjZSBweXRob24gY29kZS5cbiAgICogQGRlZmF1bHQgLSBweXRob24gaXMgbm90IGdlbmVyYXRlZFxuICAgKi9cbiAgcHl0aG9uPzogUHl0aG9uT3V0cHV0T3B0aW9ucztcblxuICAvKipcbiAgICogUHJvZHVjZXMgamF2YSBjb2RlIHVuZGVyIHNyYy9tYWluL1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIGphdmEgaXMgbm90IGdlbmVyYXRlZFxuICAgKi9cbiAgamF2YT86IEphdmFPdXRwdXRPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBQcm9kdWNlcyBDIyBjb2RlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEMjIGlzIG5vdCBnZW5lcmF0ZWRcbiAgICovXG4gIGNzaGFycD86IENTaGFycE91dHB1dE9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNpaU91dHB1dE9wdGlvbnMge1xuICAvKipcbiAgICogUGF0aCB0byBzYXZlIHRoZSAuanNpaSBvdXRwdXQgdG8uXG4gICAqL1xuICBwYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHl0aG9uT3V0cHV0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBCYXNlIHJvb3QgZGlyZWN0b3J5LlxuICAgKi9cbiAgb3V0ZGlyOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSB0aGUgcHl0aG9uIG1vZHVsZSB0byBnZW5lcmF0ZS5cbiAgICpcbiAgICogVGhpcyBtdXN0IGZvbGxvdyB0aGUgc3RhbmRhcmQgUHl0aG9uIG1vZHVsZSBuYW1lIGNvbnZlbnRpb25zLlxuICAgKiBGb3IgZXhhbXBsZSwgaXQgY2Fubm90IGluY2x1ZGUgYSBoeXBoZW4gKCctJylcbiAgICovXG4gIG1vZHVsZU5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKYXZhT3V0cHV0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBCYXNlIHJvb3QgZGlyZWN0b3J5LlxuICAgKi9cbiAgb3V0ZGlyOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBqYXZhIHBhY2thZ2UgdG8gZ2VuZXJhdGVcbiAgICpcbiAgICogVGhpcyBtdXN0IGZvbGxvdyBzdGFuZGFyZCBKYXZhIHBhY2thZ2UgY29udmVudGlvbnMuXG4gICAqIEZvciBleGFtcGxlLCBpdCBjYW5ub3QgaW5jbHVkZSBhIGh5cGhlbiAoJy0nKVxuICAgKi9cbiAgcGFja2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENTaGFycE91dHB1dE9wdGlvbnMge1xuICAvKipcbiAgICogQmFzZSByb290IGRpcmVjdG9yeS5cbiAgICovXG4gIG91dGRpcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcm9vdCBuYW1lc3BhY2UgdG8gZ2VuZXJhdGUgdHlwZXMgaW5cbiAgICpcbiAgICogVGhpcyBtdXN0IGZvbGxvdyBzdGFuZGFyZCBDIyBuYW1lc3BhY2UgY29udmVudGlvbnMuXG4gICAqIEZvciBleGFtcGxlLCBpdCBjYW5ub3QgaW5jbHVkZSBhIGh5cGhlbiAoJy0nKVxuICAgKi9cbiAgbmFtZXNwYWNlOiBzdHJpbmc7XG59XG4iXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHJlbGF0aXZlIHBhdGggb2YgdGhlIC50cyBlbnRyeXBvaW50IHdpdGhpbiB0aGUgc291cmNlIGRpcmVjdG9yeS5cbiAgICogQGRlZmF1bHQgXCJpbmRleC50c1wiXG4gICAqL1xuICBlbnRyeXBvaW50Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGRpcmVjdG9yaWVzIHRoYXQgaW5jbHVkZSBub2RlIG1vZHVsZXMgdG8gc3ltbGluayBpbnRvIHRoZSBjb21waWxlZFxuICAgKiBwYWNrYWdlLiBGb3IgZXhhbXBsZSwgaWYgeW91ciBnZW5lcmF0ZWQgY29kZSByZWZlcmVuY2VzIHNvbWUgbGlicmFyeSwgeW91XG4gICAqIHNob3VsZCBpbmNsdWRlIGl0J3MgbW9kdWxlIGRpcmVjdG9yeSBpbiBoZXJlLlxuICAgKi9cbiAgZGVwcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBTYXZlIC5qc2lpIGZpbGUgdG8gYW4gb3V0cHV0IGxvY2F0aW9uLlxuICAgKiBAZGVmYXVsdCAtIGpzaWkgbWFuaWZlc3QgaXMgb21pdHRlZC5cbiAgICovXG4gIGpzaWk/OiBKc2lpT3V0cHV0T3B0aW9ucztcblxuICAvKipcbiAgICogS2V5IGZvciB0aGUgbW9kdWxlIHRvIHByZXZlbnQgSlNJSSBjb2xsaXNpb25zLlxuICAgKlxuICAgKiBVc2UgeW91ciBvd24gaWYgaXQncyBwcm9qZWN0LXVuaXF1ZSwgb3RoZXJ3aXNlIHVzZSBkZWZhdWx0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGhhc2ggb2YgdGhlIGJhc2VwYXRoIHRvIHRoZSBtb2R1bGVcbiAgICovXG4gIG1vZHVsZUtleT86IHN0cmluZztcblxuICAvKipcbiAgICogUHJvZHVjZSBweXRob24gY29kZS5cbiAgICogQGRlZmF1bHQgLSBweXRob24gaXMgbm90IGdlbmVyYXRlZFxuICAgKi9cbiAgcHl0aG9uPzogUHl0aG9uT3V0cHV0T3B0aW9ucztcblxuICAvKipcbiAgICogUHJvZHVjZXMgamF2YSBjb2RlIHVuZGVyIHNyYy9tYWluL1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIGphdmEgaXMgbm90IGdlbmVyYXRlZFxuICAgKi9cbiAgamF2YT86IEphdmFPdXRwdXRPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBQcm9kdWNlcyBDIyBjb2RlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEMjIGlzIG5vdCBnZW5lcmF0ZWRcbiAgICovXG4gIGNzaGFycD86IENTaGFycE91dHB1dE9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIFByb2R1Y2VzIEdvbGFuZyBjb2RlLlxuICAgKiBcbiAgICogQGRlZmF1bHQgLSBnbyBpcyBub3QgZ2VuZXJhdGVkXG4gICAqL1xuICBnb2xhbmc/OiBHb0xhbmdPdXRwdXRPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzaWlPdXRwdXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFBhdGggdG8gc2F2ZSB0aGUgLmpzaWkgb3V0cHV0IHRvLlxuICAgKi9cbiAgcGF0aDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFB5dGhvbk91dHB1dE9wdGlvbnMge1xuICAvKipcbiAgICogQmFzZSByb290IGRpcmVjdG9yeS5cbiAgICovXG4gIG91dGRpcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdGhlIHB5dGhvbiBtb2R1bGUgdG8gZ2VuZXJhdGUuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBmb2xsb3cgdGhlIHN0YW5kYXJkIFB5dGhvbiBtb2R1bGUgbmFtZSBjb252ZW50aW9ucy5cbiAgICogRm9yIGV4YW1wbGUsIGl0IGNhbm5vdCBpbmNsdWRlIGEgaHlwaGVuICgnLScpXG4gICAqL1xuICBtb2R1bGVOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSmF2YU91dHB1dE9wdGlvbnMge1xuICAvKipcbiAgICogQmFzZSByb290IGRpcmVjdG9yeS5cbiAgICovXG4gIG91dGRpcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgamF2YSBwYWNrYWdlIHRvIGdlbmVyYXRlXG4gICAqXG4gICAqIFRoaXMgbXVzdCBmb2xsb3cgc3RhbmRhcmQgSmF2YSBwYWNrYWdlIGNvbnZlbnRpb25zLlxuICAgKiBGb3IgZXhhbXBsZSwgaXQgY2Fubm90IGluY2x1ZGUgYSBoeXBoZW4gKCctJylcbiAgICovXG4gIHBhY2thZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDU2hhcnBPdXRwdXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIEJhc2Ugcm9vdCBkaXJlY3RvcnkuXG4gICAqL1xuICBvdXRkaXI6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJvb3QgbmFtZXNwYWNlIHRvIGdlbmVyYXRlIHR5cGVzIGluXG4gICAqXG4gICAqIFRoaXMgbXVzdCBmb2xsb3cgc3RhbmRhcmQgQyMgbmFtZXNwYWNlIGNvbnZlbnRpb25zLlxuICAgKiBGb3IgZXhhbXBsZSwgaXQgY2Fubm90IGluY2x1ZGUgYSBoeXBoZW4gKCctJylcbiAgICovXG4gIG5hbWVzcGFjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdvTGFuZ091dHB1dE9wdGlvbnMge1xuICAvKipcbiAgICogQmFzZSByb290IGRpcmVjdG9yeS5cbiAgICovXG4gIG91dGRpcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZ28gbW9kdWxlIG5hbWVcbiAgICpcbiAgICogVGhpcyBtdXN0IGZvbGxvdyBzdGFuZGFyZCBHbyBtb2R1bGUgbmFtZSBjb252ZW50aW9ucy5cbiAgICogRm9yIGV4YW1wbGUsIGl0IGNhbm5vdCBpbmNsdWRlIGFuIHVuZGVyc2NvcmUgKCdfJykgb3IgYmUgY2FtZWxDYXNlZFxuICAgKi9cbiAgbW9kdWxlTmFtZTogc3RyaW5nO1xufVxuIl19
\ No newline at end of file
diff --git a/node_modules/jsii-srcmak/lib/srcmak.js b/node_modules/jsii-srcmak/lib/srcmak.js
index 1c30278..6f4f7a4 100644
--- a/node_modules/jsii-srcmak/lib/srcmak.js
+++ b/node_modules/jsii-srcmak/lib/srcmak.js
@@ -43,7 +43,13 @@ async function srcmak(srcdir, options = {}) {
             const target = path.join(options.csharp.outdir, reldir);
             await fs.move(source, target, { overwrite: true });
         }
+        if (options.golang) {
+            const reldir = options.golang.moduleName.replace(/_/g, '');
+            const source = path.resolve(path.join(workdir, 'dist/go/', reldir));
+            const target = path.join(options.golang.outdir, reldir);
+            await fs.move(source, target, { overwrite: true });
+        }
     });
 }
 exports.srcmak = srcmak;
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjbWFrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NyY21hay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBNkI7QUFDN0IsK0JBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQiw2QkFBa0M7QUFDbEMsdUNBQW9DO0FBRXBDLGlDQUF1QztBQUV2QyxNQUFNLEdBQUcsR0FBRyxnQkFBUyxDQUFDLFNBQUksQ0FBQyxDQUFDO0FBRTVCLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUU3RCxLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQWMsRUFBRSxVQUFtQixFQUFHO0lBQ2pFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxNQUFNLGNBQU8sQ0FBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLEVBQUU7UUFDNUIsaUNBQWlDO1FBQ2pDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0IsMkJBQTJCO1FBQzNCLE1BQU0saUJBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFaEMsNkJBQTZCO1FBQzdCLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNoQixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvRDtRQUVELDhCQUE4QjtRQUM5QixNQUFNLFdBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTVELDJDQUEyQztRQUMzQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtZQUMzRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDM0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1lBQzdELE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUN4QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTFDRCx3QkEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBuY3AgYXMgX25jcCB9IGZyb20gJ25jcCc7XG5pbXBvcnQgeyBjb21waWxlIH0gZnJvbSAnLi9jb21waWxlJztcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgZXhlYywgbWtkdGVtcCB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IG5jcCA9IHByb21pc2lmeShfbmNwKTtcblxuY29uc3QgcGFjbWFrTW9kdWxlID0gcmVxdWlyZS5yZXNvbHZlKCdqc2lpLXBhY21hay9iaW4vanNpaS1wYWNtYWsnKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNyY21hayhzcmNkaXI6IHN0cmluZywgb3B0aW9uczogT3B0aW9ucyA9IHsgfSkge1xuICBpZiAoIShhd2FpdCBmcy5wYXRoRXhpc3RzKHNyY2RpcikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmFibGUgdG8gZmluZCBzb3VyY2UgZGlyZWN0b3J5ICR7c3JjZGlyfWApO1xuICB9XG5cbiAgYXdhaXQgbWtkdGVtcChhc3luYyB3b3JrZGlyID0+IHtcbiAgICAvLyBjb3B5IHNvdXJjZXMgdG8gdGVtcCBkaXJlY3RvcnlcbiAgICBhd2FpdCBmcy5jb3B5KHNyY2Rpciwgd29ya2Rpcik7XG5cbiAgICAvLyBwZXJmb3JtIGpzaWkgY29tcGlsYXRpb25cbiAgICBhd2FpdCBjb21waWxlKHdvcmtkaXIsIG9wdGlvbnMpO1xuXG4gICAgLy8gZXh0cmFjdCAuanNpaSBpZiByZXF1ZXN0ZWRcbiAgICBpZiAob3B0aW9ucy5qc2lpKSB7XG4gICAgICBhd2FpdCBmcy5jb3B5KHBhdGguam9pbih3b3JrZGlyLCAnLmpzaWknKSwgb3B0aW9ucy5qc2lpLnBhdGgpO1xuICAgIH1cblxuICAgIC8vIHJ1biBwYWNtYWsgdG8gZ2VuZXJhdGUgY29kZVxuICAgIGF3YWl0IGV4ZWMocGFjbWFrTW9kdWxlLCBbJy0tY29kZS1vbmx5J10sIHsgY3dkOiB3b3JrZGlyIH0pO1xuXG4gICAgLy8gZXh0cmFjdCBjb2RlIGJhc2VkIG9uIHNlbGVjdGVkIGxhbmd1YWdlc1xuICAgIGlmIChvcHRpb25zLnB5dGhvbikge1xuICAgICAgY29uc3QgcmVsZGlyID0gb3B0aW9ucy5weXRob24ubW9kdWxlTmFtZS5yZXBsYWNlKC9cXC4vZywgJy8nKTsgLy8ganNpaSByZXBsYWNlcyBcIi5cIiB3aXRoIFwiL1wiXG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L3B5dGhvbi9zcmMnLCByZWxkaXIpKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHBhdGguam9pbihvcHRpb25zLnB5dGhvbi5vdXRkaXIsIHJlbGRpcik7XG4gICAgICBhd2FpdCBmcy5tb3ZlKHNvdXJjZSwgdGFyZ2V0LCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5qYXZhKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L2phdmEvc3JjLycpKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHBhdGguam9pbihvcHRpb25zLmphdmEub3V0ZGlyLCAnc3JjLycpO1xuICAgICAgYXdhaXQgZnMubWtkaXJwKHRhcmdldCk7IC8vIG1ha2Ugc3VyZSB0YXJnZXQgZGlyZWN0b3J5IGV4aXN0c1xuICAgICAgYXdhaXQgbmNwKHNvdXJjZSwgdGFyZ2V0LCB7IGNsb2JiZXI6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNzaGFycCkge1xuICAgICAgY29uc3QgcmVsZGlyID0gb3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlO1xuICAgICAgY29uc3Qgc291cmNlID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbih3b3JrZGlyLCAnZGlzdC9kb3RuZXQvJywgcmVsZGlyKSk7XG4gICAgICBjb25zdCB0YXJnZXQgPSBwYXRoLmpvaW4ob3B0aW9ucy5jc2hhcnAub3V0ZGlyLCByZWxkaXIpO1xuICAgICAgYXdhaXQgZnMubW92ZShzb3VyY2UsIHRhcmdldCwgeyBvdmVyd3JpdGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjbWFrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NyY21hay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBNkI7QUFDN0IsK0JBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQiw2QkFBa0M7QUFDbEMsdUNBQW9DO0FBRXBDLGlDQUF1QztBQUV2QyxNQUFNLEdBQUcsR0FBRyxnQkFBUyxDQUFDLFNBQUksQ0FBQyxDQUFDO0FBRTVCLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUU3RCxLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQWMsRUFBRSxVQUFtQixFQUFHO0lBQ2pFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxNQUFNLGNBQU8sQ0FBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLEVBQUU7UUFDNUIsaUNBQWlDO1FBQ2pDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0IsMkJBQTJCO1FBQzNCLE1BQU0saUJBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFaEMsNkJBQTZCO1FBQzdCLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNoQixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvRDtRQUVELDhCQUE4QjtRQUM5QixNQUFNLFdBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTVELDJDQUEyQztRQUMzQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtZQUMzRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDM0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1lBQzdELE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUN4QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBakRELHdCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IG5jcCBhcyBfbmNwIH0gZnJvbSAnbmNwJztcbmltcG9ydCB7IGNvbXBpbGUgfSBmcm9tICcuL2NvbXBpbGUnO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBleGVjLCBta2R0ZW1wIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgbmNwID0gcHJvbWlzaWZ5KF9uY3ApO1xuXG5jb25zdCBwYWNtYWtNb2R1bGUgPSByZXF1aXJlLnJlc29sdmUoJ2pzaWktcGFjbWFrL2Jpbi9qc2lpLXBhY21haycpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3JjbWFrKHNyY2Rpcjogc3RyaW5nLCBvcHRpb25zOiBPcHRpb25zID0geyB9KSB7XG4gIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoc3JjZGlyKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBmaW5kIHNvdXJjZSBkaXJlY3RvcnkgJHtzcmNkaXJ9YCk7XG4gIH1cblxuICBhd2FpdCBta2R0ZW1wKGFzeW5jIHdvcmtkaXIgPT4ge1xuICAgIC8vIGNvcHkgc291cmNlcyB0byB0ZW1wIGRpcmVjdG9yeVxuICAgIGF3YWl0IGZzLmNvcHkoc3JjZGlyLCB3b3JrZGlyKTtcblxuICAgIC8vIHBlcmZvcm0ganNpaSBjb21waWxhdGlvblxuICAgIGF3YWl0IGNvbXBpbGUod29ya2Rpciwgb3B0aW9ucyk7XG5cbiAgICAvLyBleHRyYWN0IC5qc2lpIGlmIHJlcXVlc3RlZFxuICAgIGlmIChvcHRpb25zLmpzaWkpIHtcbiAgICAgIGF3YWl0IGZzLmNvcHkocGF0aC5qb2luKHdvcmtkaXIsICcuanNpaScpLCBvcHRpb25zLmpzaWkucGF0aCk7XG4gICAgfVxuXG4gICAgLy8gcnVuIHBhY21hayB0byBnZW5lcmF0ZSBjb2RlXG4gICAgYXdhaXQgZXhlYyhwYWNtYWtNb2R1bGUsIFsnLS1jb2RlLW9ubHknXSwgeyBjd2Q6IHdvcmtkaXIgfSk7XG5cbiAgICAvLyBleHRyYWN0IGNvZGUgYmFzZWQgb24gc2VsZWN0ZWQgbGFuZ3VhZ2VzXG4gICAgaWYgKG9wdGlvbnMucHl0aG9uKSB7XG4gICAgICBjb25zdCByZWxkaXIgPSBvcHRpb25zLnB5dGhvbi5tb2R1bGVOYW1lLnJlcGxhY2UoL1xcLi9nLCAnLycpOyAvLyBqc2lpIHJlcGxhY2VzIFwiLlwiIHdpdGggXCIvXCJcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4od29ya2RpciwgJ2Rpc3QvcHl0aG9uL3NyYycsIHJlbGRpcikpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMucHl0aG9uLm91dGRpciwgcmVsZGlyKTtcbiAgICAgIGF3YWl0IGZzLm1vdmUoc291cmNlLCB0YXJnZXQsIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmphdmEpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4od29ya2RpciwgJ2Rpc3QvamF2YS9zcmMvJykpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMuamF2YS5vdXRkaXIsICdzcmMvJyk7XG4gICAgICBhd2FpdCBmcy5ta2RpcnAodGFyZ2V0KTsgLy8gbWFrZSBzdXJlIHRhcmdldCBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICBhd2FpdCBuY3Aoc291cmNlLCB0YXJnZXQsIHsgY2xvYmJlcjogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3NoYXJwKSB7XG4gICAgICBjb25zdCByZWxkaXIgPSBvcHRpb25zLmNzaGFycC5uYW1lc3BhY2U7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L2RvdG5ldC8nLCByZWxkaXIpKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHBhdGguam9pbihvcHRpb25zLmNzaGFycC5vdXRkaXIsIHJlbGRpcik7XG4gICAgICBhd2FpdCBmcy5tb3ZlKHNvdXJjZSwgdGFyZ2V0LCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5nb2xhbmcpIHtcbiAgICAgIGNvbnN0IHJlbGRpciA9IG9wdGlvbnMuZ29sYW5nLm1vZHVsZU5hbWUucmVwbGFjZSgvXy9nLCAnJyk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L2dvLycsIHJlbGRpcikpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMuZ29sYW5nLm91dGRpciwgcmVsZGlyKTtcbiAgICAgIGF3YWl0IGZzLm1vdmUoc291cmNlLCB0YXJnZXQsIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
\ No newline at end of file
diff --git a/node_modules/jsii-srcmak/lib/util.d.ts b/node_modules/jsii-srcmak/lib/util.d.ts
index 9757122..fd25964 100644
--- a/node_modules/jsii-srcmak/lib/util.d.ts
+++ b/node_modules/jsii-srcmak/lib/util.d.ts
@@ -2,7 +2,7 @@
 import { SpawnOptions } from 'child_process';
 import { Options } from './options';
 export declare function mkdtemp(closure: (dir: string) => Promise<void>): Promise<void>;
-export declare function exec(moduleName: string, args?: string[], options?: SpawnOptions): Promise<void>;
+export declare function exec(moduleName: string, args?: string[], options?: SpawnOptions): Promise<unknown>;
 /**
  * This validates that the Python module name, Java package name, and C# namespace
  * conform to language-specific constraints.
diff --git a/node_modules/jsii-srcmak/lib/util.js b/node_modules/jsii-srcmak/lib/util.js
index bbda4c7..4241f6b 100644
--- a/node_modules/jsii-srcmak/lib/util.js
+++ b/node_modules/jsii-srcmak/lib/util.js
@@ -66,7 +66,7 @@ exports.exec = exec;
  * @throws error if options do not conform
  */
 function validateOptions(options) {
-    var _a, _b, _c;
+    var _a, _b, _c, _d;
     if ((_a = options.python) === null || _a === void 0 ? void 0 : _a.moduleName.includes('-')) {
         throw new Error(`Python moduleName [${options.python.moduleName}] may not contain "-"`);
     }
@@ -76,6 +76,9 @@ function validateOptions(options) {
     if ((_c = options.csharp) === null || _c === void 0 ? void 0 : _c.namespace.includes('-')) {
         throw new Error(`C# namespace [${options.csharp.namespace}] may not contain "-"`);
     }
+    if ((_d = options.golang) === null || _d === void 0 ? void 0 : _d.moduleName.includes('_')) {
+        throw new Error(`Go module name [${options.golang.moduleName}] may not contain "_"`);
+    }
 }
 exports.validateOptions = validateOptions;
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFvRDtBQUNwRCx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUd4QixLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQXVDO0lBQ25FLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLElBQUk7UUFDRixNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUU7WUFDM0IsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUM7QUFkRCwwQkFjQztBQUVNLEtBQUssVUFBVSxJQUFJLENBQUMsVUFBa0IsRUFBRSxPQUFpQixFQUFFLEVBQUUsVUFBd0IsRUFBRztJQUM3RixPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFOztRQUVwQyxNQUFNLElBQUksR0FBaUI7WUFDekIsR0FBRyxPQUFPO1lBQ1YsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDbkMsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLHFCQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRW5FLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDakMsTUFBQSxLQUFLLENBQUMsTUFBTSwwQ0FBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQUEsS0FBSyxDQUFDLE1BQU0sMENBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVwRCxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFOztZQUFDLE9BQUEsSUFBSSxLQUFLLENBQUM7Z0JBQzlDLE9BQU87Z0JBQ1AsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUN4Rix1RkFBdUY7Z0JBQ3ZGLGdCQUFnQixVQUFVLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDOUMsZ0JBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBQSxPQUFPLENBQUMsR0FBRyxtQ0FBSSxHQUFHLENBQUMsRUFBRTtnQkFDbEQsdUZBQXVGO2FBQ3hGLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7U0FBQSxDQUFDO1FBRWQsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxRQUFRLENBQUMsbUNBQW1DLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDeEIsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNkLE9BQU8sRUFBRSxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsb0RBQW9ELElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNuRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBbENELG9CQWtDQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxPQUFnQjs7SUFDOUMsSUFBSSxNQUFBLE9BQU8sQ0FBQyxNQUFNLDBDQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLHVCQUF1QixDQUFDLENBQUM7S0FDekY7SUFFRCxJQUFJLE1BQUEsT0FBTyxDQUFDLElBQUksMENBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sdUJBQXVCLENBQUMsQ0FBQztLQUMvRTtJQUVELElBQUksTUFBQSxPQUFPLENBQUMsTUFBTSwwQ0FBRSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ25GO0FBQ0gsQ0FBQztBQVpELDBDQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Bhd24sIFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWtkdGVtcChjbG9zdXJlOiAoZGlyOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgY29uc3Qgd29ya2RpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVtcC0nKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgY2xvc3VyZSh3b3JrZGlyKTtcblxuICAgIGlmICghcHJvY2Vzcy5lbnYuUkVUQUlOX1RNUCkge1xuICAgICAgYXdhaXQgZnMucmVtb3ZlKHdvcmtkaXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBOT1RFOiBUZW1wIGRpcmVjdG9yeSByZXRhaW5lZCAoUkVUQUlOX1RNUD0xKTogJHt3b3JrZGlyfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYE5PVEU6IFRlbXAgZGlyZWN0b3J5IHJldGFpbmVkIGR1ZSB0byBhbiBlcnJvcjogJHt3b3JrZGlyfWApO1xuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWMobW9kdWxlTmFtZTogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSA9IFtdLCBvcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB7IH0pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChvaywgZmFpbCkgPT4ge1xuXG4gICAgY29uc3Qgb3B0czogU3Bhd25PcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdwaXBlJ10sXG4gICAgfTtcbiAgICBjb25zdCBjaGlsZCA9IHNwYXduKHByb2Nlc3MuZXhlY1BhdGgsIFttb2R1bGVOYW1lLCAuLi5hcmdzXSwgb3B0cyk7XG5cbiAgICBjb25zdCBkYXRhID0gbmV3IEFycmF5PEJ1ZmZlcj4oKTtcbiAgICBjaGlsZC5zdGRvdXQ/Lm9uKCdkYXRhJywgY2h1bmsgPT4gZGF0YS5wdXNoKGNodW5rKSk7XG4gICAgY2hpbGQuc3RkZXJyPy5vbignZGF0YScsIGNodW5rID0+IGRhdGEucHVzaChjaHVuaykpO1xuXG4gICAgY29uc3QgbmV3RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKSA9PiBuZXcgRXJyb3IoW1xuICAgICAgbWVzc2FnZSxcbiAgICAgICcgIHwgJyArIEJ1ZmZlci5jb25jYXQoZGF0YSkudG9TdHJpbmcoJ3V0Zi04Jykuc3BsaXQoJ1xcbicpLmZpbHRlcih4ID0+IHgpLmpvaW4oJ1xcbiAgfCAnKSxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICAgIGAgIHwgQ29tbWFuZDogJHttb2R1bGVOYW1lfSAke2FyZ3Muam9pbignICcpfWAsXG4gICAgICBgICB8IFdvcmtkaXI6ICR7cGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkID8/ICcuJyl9YCxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICBdLmpvaW4oJ1xcbicpKTtcblxuICAgIGNoaWxkLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgIHRocm93IG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZC4gZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBjaGlsZC5vbmNlKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gb2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsKG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZCB3aXRoIG5vbi16ZXJvIGV4aXQgY29kZTogJHtjb2RlfWApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyB2YWxpZGF0ZXMgdGhhdCB0aGUgUHl0aG9uIG1vZHVsZSBuYW1lLCBKYXZhIHBhY2thZ2UgbmFtZSwgYW5kIEMjIG5hbWVzcGFjZVxuICogY29uZm9ybSB0byBsYW5ndWFnZS1zcGVjaWZpYyBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHNldCBieSB0aGUgY29uc3VtZXJcbiAqIEB0aHJvd3MgZXJyb3IgaWYgb3B0aW9ucyBkbyBub3QgY29uZm9ybVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMucHl0aG9uPy5tb2R1bGVOYW1lLmluY2x1ZGVzKCctJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFB5dGhvbiBtb2R1bGVOYW1lIFske29wdGlvbnMucHl0aG9uLm1vZHVsZU5hbWV9XSBtYXkgbm90IGNvbnRhaW4gXCItXCJgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmphdmE/LnBhY2thZ2UuaW5jbHVkZXMoJy0nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSmF2YSBwYWNrYWdlIFske29wdGlvbnMuamF2YS5wYWNrYWdlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jc2hhcnA/Lm5hbWVzcGFjZS5pbmNsdWRlcygnLScpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDIyBuYW1lc3BhY2UgWyR7b3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cbn1cbiJdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFvRDtBQUNwRCx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUd4QixLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQXVDO0lBQ25FLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLElBQUk7UUFDRixNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUU7WUFDM0IsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUM7QUFkRCwwQkFjQztBQUVNLEtBQUssVUFBVSxJQUFJLENBQUMsVUFBa0IsRUFBRSxPQUFpQixFQUFFLEVBQUUsVUFBd0IsRUFBRztJQUM3RixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFOztRQUU5QixNQUFNLElBQUksR0FBaUI7WUFDekIsR0FBRyxPQUFPO1lBQ1YsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDbkMsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLHFCQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFD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d24sIFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWtkdGVtcChjbG9zdXJlOiAoZGlyOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgY29uc3Qgd29ya2RpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVtcC0nKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgY2xvc3VyZSh3b3JrZGlyKTtcblxuICAgIGlmICghcHJvY2Vzcy5lbnYuUkVUQUlOX1RNUCkge1xuICAgICAgYXdhaXQgZnMucmVtb3ZlKHdvcmtkaXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBOT1RFOiBUZW1wIGRpcmVjdG9yeSByZXRhaW5lZCAoUkVUQUlOX1RNUD0xKTogJHt3b3JrZGlyfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYE5PVEU6IFRlbXAgZGlyZWN0b3J5IHJldGFpbmVkIGR1ZSB0byBhbiBlcnJvcjogJHt3b3JrZGlyfWApO1xuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWMobW9kdWxlTmFtZTogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSA9IFtdLCBvcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB7IH0pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChvaywgZmFpbCkgPT4ge1xuXG4gICAgY29uc3Qgb3B0czogU3Bhd25PcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdwaXBlJ10sXG4gICAgfTtcbiAgICBjb25zdCBjaGlsZCA9IHNwYXduKHByb2Nlc3MuZXhlY1BhdGgsIFttb2R1bGVOYW1lLCAuLi5hcmdzXSwgb3B0cyk7XG5cbiAgICBjb25zdCBkYXRhID0gbmV3IEFycmF5PEJ1ZmZlcj4oKTtcbiAgICBjaGlsZC5zdGRvdXQ/Lm9uKCdkYXRhJywgY2h1bmsgPT4gZGF0YS5wdXNoKGNodW5rKSk7XG4gICAgY2hpbGQuc3RkZXJyPy5vbignZGF0YScsIGNodW5rID0+IGRhdGEucHVzaChjaHVuaykpO1xuXG4gICAgY29uc3QgbmV3RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKSA9PiBuZXcgRXJyb3IoW1xuICAgICAgbWVzc2FnZSxcbiAgICAgICcgIHwgJyArIEJ1ZmZlci5jb25jYXQoZGF0YSkudG9TdHJpbmcoJ3V0Zi04Jykuc3BsaXQoJ1xcbicpLmZpbHRlcih4ID0+IHgpLmpvaW4oJ1xcbiAgfCAnKSxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICAgIGAgIHwgQ29tbWFuZDogJHttb2R1bGVOYW1lfSAke2FyZ3Muam9pbignICcpfWAsXG4gICAgICBgICB8IFdvcmtkaXI6ICR7cGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkID8/ICcuJyl9YCxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICBdLmpvaW4oJ1xcbicpKTtcblxuICAgIGNoaWxkLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgIHRocm93IG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZC4gZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBjaGlsZC5vbmNlKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gb2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsKG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZCB3aXRoIG5vbi16ZXJvIGV4aXQgY29kZTogJHtjb2RlfWApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyB2YWxpZGF0ZXMgdGhhdCB0aGUgUHl0aG9uIG1vZHVsZSBuYW1lLCBKYXZhIHBhY2thZ2UgbmFtZSwgYW5kIEMjIG5hbWVzcGFjZVxuICogY29uZm9ybSB0byBsYW5ndWFnZS1zcGVjaWZpYyBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHNldCBieSB0aGUgY29uc3VtZXJcbiAqIEB0aHJvd3MgZXJyb3IgaWYgb3B0aW9ucyBkbyBub3QgY29uZm9ybVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMucHl0aG9uPy5tb2R1bGVOYW1lLmluY2x1ZGVzKCctJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFB5dGhvbiBtb2R1bGVOYW1lIFske29wdGlvbnMucHl0aG9uLm1vZHVsZU5hbWV9XSBtYXkgbm90IGNvbnRhaW4gXCItXCJgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmphdmE/LnBhY2thZ2UuaW5jbHVkZXMoJy0nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSmF2YSBwYWNrYWdlIFske29wdGlvbnMuamF2YS5wYWNrYWdlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jc2hhcnA/Lm5hbWVzcGFjZS5pbmNsdWRlcygnLScpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDIyBuYW1lc3BhY2UgWyR7b3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5nb2xhbmc/Lm1vZHVsZU5hbWUuaW5jbHVkZXMoJ18nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgR28gbW9kdWxlIG5hbWUgWyR7b3B0aW9ucy5nb2xhbmcubW9kdWxlTmFtZX1dIG1heSBub3QgY29udGFpbiBcIl9cImApO1xuICB9XG59XG4iXX0=
\ No newline at end of file
